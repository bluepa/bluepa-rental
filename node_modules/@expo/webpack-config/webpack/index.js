"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const paths_1 = require("@expo/config/paths");
const addons_1 = require("./addons");
const env_1 = require("./env");
const webpack_config_1 = __importDefault(require("./webpack.config"));
/**
 * Create the official Webpack config for loading Expo web apps.
 *
 * @param env Environment props used to configure features.
 * @param argv
 * @category default
 */
async function createWebpackConfigAsync(env = {}, argv = {}) {
    if (!env.projectRoot) {
        env.projectRoot = paths_1.getPossibleProjectRoot();
    }
    if (!env.platform) {
        // @ts-ignore
        env.platform = process.env.EXPO_WEBPACK_PLATFORM;
    }
    const environment = env_1.validateEnvironment(env);
    const config = await webpack_config_1.default(environment, argv);
    // @ts-ignore: deprecated
    if (environment.info) {
        console.warn('environment.info is deprecated');
    }
    if (environment.offline === true) {
        const { workbox = {} } = argv;
        const publicUrl = workbox.publicUrl || env_1.getPublicPaths(environment).publicUrl;
        // No SW for native
        if (['ios', 'android'].includes(env.platform || '')) {
            return config;
        }
        return addons_1.withWorkbox(config, Object.assign(Object.assign({ projectRoot: environment.projectRoot }, workbox), { publicUrl, platform: env.platform }));
    }
    return config;
}
exports.default = createWebpackConfigAsync;
//# sourceMappingURL=index.js.map