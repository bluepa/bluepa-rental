{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":";;;;;AAAA,8CAA4D;AAG5D,qCAAuC;AACvC,+BAA4D;AAE5D,sEAA6C;AAE7C;;;;;;GAMG;AACY,KAAK,UAAU,wBAAwB,CACpD,MAAwB,EAAE,EAC1B,OAAkB,EAAE;IAEpB,IAAI,CAAC,GAAG,CAAC,WAAW,EAAE;QACpB,GAAG,CAAC,WAAW,GAAG,8BAAsB,EAAE,CAAC;KAC5C;IACD,IAAI,CAAC,GAAG,CAAC,QAAQ,EAAE;QACjB,aAAa;QACb,GAAG,CAAC,QAAQ,GAAG,OAAO,CAAC,GAAG,CAAC,qBAAqB,CAAC;KAClD;IAED,MAAM,WAAW,GAAgB,yBAAmB,CAAC,GAAG,CAAC,CAAC;IAE1D,MAAM,MAAM,GAAqC,MAAM,wBAAa,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC;IAExF,yBAAyB;IACzB,IAAI,WAAW,CAAC,IAAI,EAAE;QACpB,OAAO,CAAC,IAAI,CAAC,gCAAgC,CAAC,CAAC;KAChD;IAED,IAAI,WAAW,CAAC,OAAO,KAAK,IAAI,EAAE;QAChC,MAAM,EAAE,OAAO,GAAG,EAAE,EAAE,GAAG,IAAI,CAAC;QAC9B,MAAM,SAAS,GAAG,OAAO,CAAC,SAAS,IAAI,oBAAc,CAAC,WAAW,CAAC,CAAC,SAAS,CAAC;QAE7E,mBAAmB;QACnB,IAAI,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,QAAQ,IAAI,EAAE,CAAC,EAAE;YACnD,OAAO,MAAM,CAAC;SACf;QAED,OAAO,oBAAW,CAAC,MAAM,gCACvB,WAAW,EAAE,WAAW,CAAC,WAAW,IACjC,OAAO,KACV,SAAS,EACT,QAAQ,EAAE,GAAG,CAAC,QAAQ,IACtB,CAAC;KACJ;IACD,OAAO,MAAM,CAAC;AAChB,CAAC;AAtCD,2CAsCC","sourcesContent":["import { getPossibleProjectRoot } from '@expo/config/paths';\nimport { Configuration } from 'webpack';\n\nimport { withWorkbox } from './addons';\nimport { getPublicPaths, validateEnvironment } from './env';\nimport { Arguments, DevConfiguration, Environment, InputEnvironment } from './types';\nimport webpackConfig from './webpack.config';\n\n/**\n * Create the official Webpack config for loading Expo web apps.\n *\n * @param env Environment props used to configure features.\n * @param argv\n * @category default\n */\nexport default async function createWebpackConfigAsync(\n  env: InputEnvironment = {},\n  argv: Arguments = {}\n): Promise<Configuration | DevConfiguration> {\n  if (!env.projectRoot) {\n    env.projectRoot = getPossibleProjectRoot();\n  }\n  if (!env.platform) {\n    // @ts-ignore\n    env.platform = process.env.EXPO_WEBPACK_PLATFORM;\n  }\n\n  const environment: Environment = validateEnvironment(env);\n\n  const config: Configuration | DevConfiguration = await webpackConfig(environment, argv);\n\n  // @ts-ignore: deprecated\n  if (environment.info) {\n    console.warn('environment.info is deprecated');\n  }\n\n  if (environment.offline === true) {\n    const { workbox = {} } = argv;\n    const publicUrl = workbox.publicUrl || getPublicPaths(environment).publicUrl;\n\n    // No SW for native\n    if (['ios', 'android'].includes(env.platform || '')) {\n      return config;\n    }\n\n    return withWorkbox(config, {\n      projectRoot: environment.projectRoot,\n      ...workbox,\n      publicUrl,\n      platform: env.platform,\n    });\n  }\n  return config;\n}\n"]}